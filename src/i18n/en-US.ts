import { TranslationKey } from './index';

export const enUS: TranslationKey = {
  common: {
    ok: 'OK',
    cancel: 'Cancel',
    confirm: 'Confirm',
    delete: 'Delete',
    edit: 'Edit',
    save: 'Save',
    close: 'Close',
    loading: 'Loading...',
    error: 'Error',
    warning: 'Warning',
    success: 'Success',
    clear: 'Clear',
    export: 'Export',
    import: 'Import',
    refresh: 'Refresh',
    connect: 'Connect',
    disconnect: 'Disconnect',
    retry: 'Retry',
    copy: 'Copy',
    back: 'Back',
    next: 'Next',
    submit: 'Submit',
    reset: 'Reset',
  },
  
  tabs: {
    config: 'Configuration',
    explorer: 'MCP Explorer',
    history: 'History',
    tools: 'Tools',
    resources: 'Resources',
    prompts: 'Prompts',
    llm: 'LLM Config',
    security: 'Security Testing',
  },
  
  config: {
    title: 'MCP Server Configuration',
    serverName: 'Server Name',
    serverNamePlaceholder: 'Enter server name',
    serverHost: 'Server Host',
    serverHostPlaceholder: 'e.g., http://localhost:8000',
    ssePath: 'SSE Path',
    ssePathPlaceholder: 'e.g., /sse',
    messagePath: 'Message Path',
    messagePathPlaceholder: 'e.g., /message',
    authentication: 'Authentication',
    authType: 'Auth Type',
    testConnection: 'Test Connection',
    saveConfig: 'Save Config',
    savedConfigs: 'Saved Configurations',
    loadConfig: 'Load Config',
    deleteConfig: 'Delete Config',
    exportConfigs: 'Export Configs',
    importConfigs: 'Import Configs',
    autoSave: 'Auto Save Config',
    autoSaveTooltip: 'Automatically save configuration after successful connection',
    noSavedConfigs: 'No saved configurations',
    connectionStatus: {
      connected: 'Connected',
      connecting: 'Connecting...',
      disconnected: 'Disconnected',
      error: 'Connection Error',
    },
    messages: {
      serverNameRequired: 'Please enter server name',
      serverHostRequired: 'Please enter server host',
      serverHostFormat: 'Please enter correct host format, e.g., http://127.0.0.1:8020 (do not include path)',
      ssePathRequired: 'Please enter SSE path',
      connectSuccess: 'Connected successfully',
      connectFailed: 'Connection failed',
      disconnectSuccess: 'Disconnected',
      disconnectFailed: 'Failed to disconnect',
      configSavedAuto: 'Configuration saved automatically',
      configNotSet: 'MCP server configuration not set',
      pleaseCheckConfig: 'Connection failed, please check server configuration',
    },
  },
  
  auth: {
    none: 'No Authentication',
    apiKey: 'API Key',
    basic: 'Basic Auth',
    custom: 'Custom Headers',
    combined: 'Combined Auth',
    apiKeyLabel: 'API Key',
    apiKeyPlaceholder: 'Enter API Key',
    username: 'Username',
    usernamePlaceholder: 'Enter username',
    password: 'Password',
    passwordPlaceholder: 'Enter password',
    headerName: 'Header Name',
    headerNamePlaceholder: 'e.g., Authorization',
    headerValue: 'Header Value',
    headerValuePlaceholder: 'Enter header value',
    prefix: 'Prefix',
    prefixPlaceholder: 'e.g., Bearer ',
    urlParams: 'URL Parameters',
    paramName: 'Parameter Name',
    paramValue: 'Parameter Value',
    addParam: 'Add Parameter',
    removeParam: 'Remove Parameter',
    combinedMode: 'Combined Authentication Mode',
    combinedModeDesc: 'You can configure multiple authentication methods simultaneously, and the system will automatically combine and apply these authentication configurations',
    enableApiKey: 'Enable API Key Authentication',
    enableUrlParams: 'Enable URL Parameter Authentication',
    enableCustomHeaders: 'Enable Custom Header Authentication',
  },
  
  explorer: {
    title: 'MCP Protocol Explorer',
    noConnection: 'Not connected to MCP server',
    connectFirst: 'Please connect to an MCP server in the configuration page first',
    serverInfo: 'Server Information',
    protocolVersion: 'Protocol Version',
    capabilities: 'Server Capabilities',
    instructions: 'Instructions',
  },
  
  tools: {
    title: 'Tools',
    noTools: 'No tools available',
    selectTool: 'Select Tool',
    toolName: 'Tool Name',
    description: 'Description',
    parameters: 'Parameters',
    callTool: 'Call Tool',
    result: 'Result',
    securityCheck: 'Security Check',
    pleaseInput: 'Please enter',
    riskLevel: {
      low: 'Low Risk',
      medium: 'Medium Risk',
      high: 'High Risk',
      critical: 'Critical Risk',
    },
  },
  
  resources: {
    title: 'Resources',
    noResources: 'No resources available',
    selectResource: 'Please select a resource to read',
    resourceName: 'Resource Name',
    resourceUri: 'Resource URI',
    mimeType: 'MIME Type',
    readResource: 'Read Resource',
    content: 'Content',
    templates: 'Resource Templates',
    staticResources: 'Static Resources',
  },
  
  prompts: {
    title: 'Prompts',
    noPrompts: 'No prompts available',
    selectPrompt: 'Please select a prompt to get',
    promptName: 'Prompt Name',
    arguments: 'Arguments',
    getPrompt: 'Get Prompt',
    messages: 'Messages',
    pleaseInput: 'Please enter',
  },
  
  history: {
    title: 'Call History',
    noHistory: 'No history records',
    totalRecords: 'Total {count} records',
    clearAll: 'Clear All',
    deleteItem: 'Delete Record',
    confirmClear: 'Are you sure you want to clear all history records?',
    confirmDelete: 'Are you sure you want to delete this record?',
    timestamp: 'Time',
    duration: 'Duration',
    type: 'Type',
    name: 'Name',
    parameters: 'Parameters',
    result: 'Result',
    securityWarnings: 'Security Warnings',
    exportHistory: 'Export History',
  },
  

  
  errors: {
    connectionFailed: 'Connection failed',
    invalidConfig: 'Invalid configuration',
    toolCallFailed: 'Tool call failed',
    resourceReadFailed: 'Resource read failed',
    promptGetFailed: 'Prompt get failed',
    saveConfigFailed: 'Failed to save configuration',
    loadConfigFailed: 'Failed to load configuration',
    importFailed: 'Import failed',
    exportFailed: 'Export failed',
    networkError: 'Network error',
    timeout: 'Request timeout',
    unauthorized: 'Authentication failed',
    serverError: 'Server error',
  },
  
  success: {
    connected: 'Connected successfully',
    disconnected: 'Disconnected',
    configSaved: 'Configuration saved successfully',
    configLoaded: 'Configuration loaded successfully',
    configDeleted: 'Configuration deleted successfully',
    historyCleared: 'History cleared',
    itemDeleted: 'Record deleted successfully',
    exportSuccess: 'Export successful',
    importSuccess: 'Import successful',
  },
  
  llm: {
    title: 'LLM Model Configuration',
    addConfig: 'Add Configuration',
    editLLMConfig: 'Edit LLM Configuration',
    addLLMConfig: 'Add LLM Configuration',
    configName: 'Configuration Name',
    configNamePlaceholder: 'e.g., OpenAI GPT-4',
    configNameRequired: 'Please enter configuration name',
    modelType: 'Model Type',
    modelTypeRequired: 'Please select model type',
    endpoint: 'API Endpoint URL',
    endpointRequired: 'Please enter API endpoint URL',
    endpointPlaceholder: 'https://api.openai.com/v1/chat/completions',
    endpointHelpDefault: 'Please enter the complete API endpoint URL, platform type determines protocol format',
    endpointHelpOpenAI: 'OpenAI API: Uses OpenAI protocol format, please enter complete API endpoint URL',
    endpointHelpCustom: 'OpenAI-compatible API: Uses OpenAI protocol format, please enter complete API endpoint URL',
    endpointHelpClaude: 'Claude API: Uses Claude protocol format, please enter complete API endpoint URL',
    endpointHelpGemini: 'Gemini API: Uses Gemini protocol format, please enter complete API endpoint URL',
    endpointHelpOllama: 'Ollama API: Uses Ollama protocol format, please enter complete API endpoint URL',
    modelName: 'Model Name',
    modelNamePlaceholder: 'gpt-4',
    modelNameRequired: 'Please enter model name',
    apiKey: 'API Key',
    apiKeyPlaceholder: 'sk-...',
    maxTokens: 'Max Tokens',
    temperature: 'Temperature',
    enabled: 'Enabled',
    disabled: 'Disabled',
    description: 'Description',
    descriptionPlaceholder: 'Configuration description (optional)',
    customHeaders: 'Custom Headers',
    addCustomHeader: 'Add Custom Header',
    headerName: 'Header Name',
    headerNameRequired: 'Please enter header name',
    headerValue: 'Header Value',
    headerValueRequired: 'Please enter header value',
    deleteHeader: 'Delete',
    testConnection: 'Test',
    saveConfig: 'Save',
    editConfig: 'Edit',
    deleteConfig: 'Delete',
    confirmDelete: 'Are you sure you want to delete this configuration?',
    connectionTestSuccess: 'Connection test successful',
    connectionTestFailed: 'Connection test failed',
    configSaved: 'Configuration saved successfully',
    configUpdated: 'Configuration updated successfully',
    configDeleted: 'Configuration deleted successfully',
    configEnabled: 'Configuration enabled',
    configDisabled: 'Configuration disabled',
    saveConfigFailed: 'Failed to save configuration',
    noConfigs: 'No LLM configurations',
    name: 'Name',
    type: 'Type',
    endpointUrl: 'Endpoint URL',
    model: 'Model',
    status: 'Status',
    actions: 'Actions',
    types: {
      openai: 'OpenAI',
      claude: 'Claude (Anthropic)',
      gemini: 'Gemini (Google)',
      ollama: 'Ollama',
      custom: 'Custom API',
    },
  },

     security: {
     title: 'Security Testing',
     warning: 'Security Warning',
     riskAssessment: 'Risk Assessment',
     noRisks: 'No security risks detected',
     potentialRisks: 'Potential Risks',
     overview: 'Security Overview',
     scanning: 'Scanning...',
     scanComplete: 'Scan Complete',
     riskLevel: 'Risk Level',
     totalIssues: 'Total Issues',
     criticalIssues: 'Critical Issues',
     highIssues: 'High Risk Issues',
     mediumIssues: 'Medium Risk Issues',
     lowIssues: 'Low Risk Issues',
     toolSecurity: 'Tool Security',
     promptSecurity: 'Prompt Security',
     resourceSecurity: 'Resource Security',
     startScan: 'Start Scan',
     stopScan: 'Stop Scan',
     scanSettings: 'Scan Settings',
     settings: 'Settings',
     scanLevel: 'Scan Level',
     basic: 'Basic Detection',
     standard: 'Standard Detection',
     deep: 'Deep Detection',
     selectLLM: 'Select LLM Model',
     selectLLMPlaceholder: 'Select LLM model for analysis',
     refreshLLMConfigs: 'Refresh Configuration List',
     autoGenerateTests: 'Auto Generate Test Cases',
     maxTestCases: 'Max Test Cases',
     timeout: 'Timeout (seconds)',
     vulnerabilities: 'Vulnerabilities',
     threats: 'Threats',
     risks: 'Risks',
     testResults: 'Test Results',
     llmAnalysis: 'LLM Analysis',
     recommendations: 'Security Recommendations',
     securityReport: 'Security Report',
     exportReport: 'Export Report',
     reportGenerated: 'Report Generated',
     overallRisk: 'Overall Risk',
     noIssuesFound: 'No security issues found',
     scanInProgress: 'Scanning in progress, please wait...',
     scanFailed: 'Scan failed',
     noLLMConfigured: 'Please configure LLM model first',
     connectFirst: 'Please connect to MCP server first',
     scanCancelled: 'Scan cancelled',
     preparingScan: 'Preparing to start scan...',
     scanSettingsSaved: 'Settings saved successfully',
     reportExported: 'Report exported successfully',
     toolName: 'Tool Name',
     promptName: 'Prompt Name',
     resourceUri: 'Resource URI',
     vulnerabilityCount: 'Vulnerabilities',
     testCaseCount: 'Test Cases',
     threatCount: 'Threats',
     riskCount: 'Risks',
     viewDetails: 'View Details',
     toolSecurityAnalysis: 'Tool Security Analysis',
     foundVulnerabilities: 'Found Vulnerabilities',
     securityTestResults: 'Test Results',
     testCase: 'Test Case',
     passed: 'Passed',
     failed: 'Failed',
     passStatus: 'Pass Status',
     riskAssessmentTitle: 'Risk Assessment',
     llmAnalysisTitle: 'LLM Analysis',
     noData: 'No Data',
     issueDist: 'Issue Distribution',
     criticalRisk: 'Critical',
     highRisk: 'High Risk',
     mediumRisk: 'Medium Risk',
     lowRisk: 'Low Risk',
     riskLevels: {
       low: 'Low Risk',
       medium: 'Medium Risk',
       high: 'High Risk',
       critical: 'Critical Risk',
     },
     checkTypes: {
       tool: 'Tool Detection',
       prompt: 'Prompt Detection',
       resource: 'Resource Detection',
     },
     vulnerabilityTypes: {
       injection: 'Injection Attack',
       privilege: 'Privilege Escalation',
       leak: 'Information Leak',
       traversal: 'Path Traversal',
       manipulation: 'Malicious Manipulation',
       malicious: 'Malicious Code',
     },
   },

  app: {
    title: 'MCP Security Inspector',
    description: 'Model Context Protocol Security Testing Tool',
    version: 'Version',
    language: 'Language',
    changeLanguage: 'Change Language',
  },
}; 