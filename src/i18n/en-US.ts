import { TranslationKey } from './index';

export const enUS: TranslationKey = {
  common: {
    ok: 'OK',
    cancel: 'Cancel',
    confirm: 'Confirm',
    delete: 'Delete',
    edit: 'Edit',
    save: 'Save',
    close: 'Close',
    loading: 'Loading...',
    error: 'Error',
    warning: 'Warning',
    success: 'Success',
    clear: 'Clear',
    export: 'Export',
    import: 'Import',
    refresh: 'Refresh',
    connect: 'Connect',
    disconnect: 'Disconnect',
    retry: 'Retry',
    copy: 'Copy',
    back: 'Back',
    next: 'Next',
    submit: 'Submit',
    reset: 'Reset',
    pageInfo: 'Page',
    of: 'of',
    records: 'records',
  },
  
  tabs: {
    config: 'Configuration',
    explorer: 'MCP Explorer',
    history: 'History',
    tools: 'Tools',
    resources: 'Resources',
    prompts: 'Prompts',
    llm: 'LLM Config',
    security: 'Security Testing',
  },
  
  config: {
    title: 'MCP Server Configuration',
    serverName: 'Server Name',
    serverNamePlaceholder: 'Enter server name',
    serverHost: 'Server Host',
    serverHostPlaceholder: 'e.g., http://localhost:8000',
    transportMode: 'Transport Mode',
    transportModePlaceholder: 'Select transport mode',
    transportModeTooltip: 'Choose between SSE (Server-Sent Events) and Streamable HTTP transport modes',
    transportModes: {
      sse: 'SSE (Server-Sent Events)',
      streamable: 'Streamable HTTP',
    },
    ssePath: 'SSE Path',
    ssePathPlaceholder: 'e.g., /sse',
    mcpPath: 'MCP Path',
    mcpPathPlaceholder: 'e.g., /mcp',
    messagePath: 'Message Path',
    messagePathPlaceholder: 'e.g., /message',
    authentication: 'Authentication',
    authType: 'Auth Type',
    protocolVersion: 'Protocol Version',
    serverVersion: 'Server Version',
    testConnection: 'Test Connection',
    saveConfig: 'Save Config',
    savedConfigs: 'Saved Configurations',
    loadConfig: 'Load Config',
    deleteConfig: 'Delete Config',
    exportConfigs: 'Export Configs',
    importConfigs: 'Import Configs',
    autoSave: 'Auto Save Config',
    autoSaveTooltip: 'Automatically save configuration after successful connection',
    noSavedConfigs: 'No saved configurations',
    connectionStatus: {
      connected: 'Connected',
      connecting: 'Connecting...',
      disconnected: 'Disconnected',
      error: 'Connection Error',
    },
    messages: {
      serverNameRequired: 'Please enter server name',
      serverHostRequired: 'Please enter server host',
      serverHostFormat: 'Please enter correct host format, e.g., http://127.0.0.1:8020 (do not include path)',
      transportModeRequired: 'Please select transport mode',
      ssePathRequired: 'Please enter SSE path',
      mcpPathRequired: 'Please enter MCP path',
      connectSuccess: 'Connected successfully',
      connectFailed: 'Connection failed',
      disconnectSuccess: 'Disconnected',
      disconnectFailed: 'Failed to disconnect',
      configSavedAuto: 'Configuration saved automatically',
      configNotSet: 'MCP server configuration not set',
      pleaseCheckConfig: 'Connection failed, please check server configuration',
    },
  },
  
  auth: {
    none: 'No Authentication',
    apiKey: 'API Key',
    basic: 'Basic Auth',
    custom: 'Custom Headers',
    combined: 'Combined Auth',
    apiKeyLabel: 'API Key',
    apiKeyPlaceholder: 'Enter API Key',
    username: 'Username',
    usernamePlaceholder: 'Enter username',
    password: 'Password',
    passwordPlaceholder: 'Enter password',
    headerName: 'Header Name',
    headerNamePlaceholder: 'e.g., Authorization',
    headerValue: 'Header Value',
    headerValuePlaceholder: 'Enter header value',
    prefix: 'Prefix',
    prefixPlaceholder: 'e.g., Bearer ',
    urlParams: 'URL Parameters',
    paramName: 'Parameter Name',
    paramValue: 'Parameter Value',
    addParam: 'Add Parameter',
    removeParam: 'Remove Parameter',
    combinedMode: 'Combined Authentication Mode',
    combinedModeDesc: 'You can configure multiple authentication methods simultaneously, and the system will automatically combine and apply these authentication configurations',
    enableApiKey: 'Enable API Key Authentication',
    enableUrlParams: 'Enable URL Parameter Authentication',
    enableCustomHeaders: 'Enable Custom Header Authentication',
  },
  
  explorer: {
    title: 'MCP Protocol Explorer',
    noConnection: 'Not connected to MCP server',
    connectFirst: 'Please connect to an MCP server in the configuration page first',
    serverInfo: 'Server Information',
    protocolVersion: 'Protocol Version',
    capabilities: 'Server Capabilities',
    instructions: 'Instructions',
  },
  
  tools: {
    title: 'Tools',
    noTools: 'No tools available',
    selectTool: 'Select Tool',
    toolName: 'Tool Name',
    description: 'Description',
    parameters: 'Parameters',
    callTool: 'Call Tool',
    result: 'Result',
    securityCheck: 'Security Check',
    pleaseInput: 'Please enter',
    riskLevel: {
      low: 'Low Risk',
      medium: 'Medium Risk',
      high: 'High Risk',
      critical: 'Critical Risk',
    },
  },
  
  resources: {
    title: 'Resources',
    noResources: 'No resources available',
    selectResource: 'Please select a resource to read',
    resourceName: 'Resource Name',
    resourceUri: 'Resource URI',
    mimeType: 'MIME Type',
    readResource: 'Read Resource',
    content: 'Content',
    templates: 'Resource Templates',
    staticResources: 'Static Resources',
  },
  
  prompts: {
    title: 'Prompts',
    noPrompts: 'No prompts available',
    selectPrompt: 'Please select a prompt to get',
    promptName: 'Prompt Name',
    arguments: 'Arguments',
    getPrompt: 'Get Prompt',
    messages: 'Messages',
    pleaseInput: 'Please enter',
  },
  
  history: {
    title: 'Call History',
    noHistory: 'No history records',
    totalRecords: 'Total {count} records',
    clearAll: 'Clear All',
    deleteItem: 'Delete Record',
    confirmClear: 'Are you sure you want to clear all history records?',
    confirmDelete: 'Are you sure you want to delete this record?',
    timestamp: 'Time',
    duration: 'Duration',
    type: 'Type',
    name: 'Name',
    parameters: 'Parameters',
    result: 'Result',
    securityWarnings: 'Security Warnings',
    exportHistory: 'Export History',
  },
  

  
  errors: {
    connectionFailed: 'Connection failed',
    invalidConfig: 'Invalid configuration',
    toolCallFailed: 'Tool call failed',
    resourceReadFailed: 'Resource read failed',
    promptGetFailed: 'Prompt get failed',
    saveConfigFailed: 'Failed to save configuration',
    loadConfigFailed: 'Failed to load configuration',
    importFailed: 'Import failed',
    exportFailed: 'Export failed',
    deleteFailed: 'Delete failed',
    clearFailed: 'Clear failed',
    loadDataFailed: 'Failed to load data',
    networkError: 'Network error',
    timeout: 'Request timeout',
    unauthorized: 'Authentication failed',
    serverError: 'Server error',
  },
  
  success: {
    connected: 'Connected successfully',
    disconnected: 'Disconnected',
    configSaved: 'Configuration saved successfully',
    configLoaded: 'Configuration loaded successfully',
    configDeleted: 'Configuration deleted successfully',
    historyCleared: 'History cleared',
    itemDeleted: 'Record deleted successfully',
    exportSuccess: 'Export successful',
    importSuccess: 'Import successful',
  },
  
  llm: {
    title: 'LLM Model Configuration',
    addConfig: 'Add Configuration',
    editLLMConfig: 'Edit LLM Configuration',
    addLLMConfig: 'Add LLM Configuration',
    configName: 'Configuration Name',
    configNamePlaceholder: 'e.g., OpenAI GPT-4',
    configNameRequired: 'Please enter configuration name',
    modelType: 'Model Type',
    modelTypeRequired: 'Please select model type',
    endpoint: 'API Endpoint URL',
    endpointRequired: 'Please enter API endpoint URL',
    endpointPlaceholder: 'https://api.openai.com/v1/chat/completions',
    endpointHelpDefault: 'Please enter the complete API endpoint URL, platform type determines protocol format',
    endpointHelpOpenAI: 'OpenAI API: Uses OpenAI protocol format, please enter complete API endpoint URL',
    endpointHelpCustom: 'OpenAI-compatible API: Uses OpenAI protocol format, please enter complete API endpoint URL',
    endpointHelpClaude: 'Claude API: Uses Claude protocol format, please enter complete API endpoint URL',
    endpointHelpGemini: 'Gemini API: Uses Gemini protocol format, please enter complete API endpoint URL',
    endpointHelpOllama: 'Ollama API: Uses Ollama protocol format, please enter complete API endpoint URL',
    modelName: 'Model Name',
    modelNamePlaceholder: 'gpt-4',
    modelNameRequired: 'Please enter model name',
    apiKey: 'API Key',
    apiKeyPlaceholder: 'sk-...',
    maxTokens: 'Max Tokens',
    temperature: 'Temperature',
    enabled: 'Enabled',
    disabled: 'Disabled',
    description: 'Description',
    descriptionPlaceholder: 'Configuration description (optional)',
    customHeaders: 'Custom Headers',
    addCustomHeader: 'Add Custom Header',
    headerName: 'Header Name',
    headerNameRequired: 'Please enter header name',
    headerValue: 'Header Value',
    headerValueRequired: 'Please enter header value',
    deleteHeader: 'Delete',
    testConnection: 'Test',
    saveConfig: 'Save',
    editConfig: 'Edit',
    deleteConfig: 'Delete',
    confirmDelete: 'Are you sure you want to delete this configuration?',
    connectionTestSuccess: 'Connection test successful',
    connectionTestFailed: 'Connection test failed',
    configSaved: 'Configuration saved successfully',
    configUpdated: 'Configuration updated successfully',
    configDeleted: 'Configuration deleted successfully',
    configEnabled: 'Configuration enabled',
    configDisabled: 'Configuration disabled',
    saveConfigFailed: 'Failed to save configuration',
    noConfigs: 'No LLM configurations',
    name: 'Name',
    type: 'Type',
    endpointUrl: 'Endpoint URL',
    model: 'Model',
    status: 'Status',
    actions: 'Actions',
    types: {
      openai: 'OpenAI',
      claude: 'Claude (Anthropic)',
      gemini: 'Gemini (Google)',
      ollama: 'Ollama',
      custom: 'Custom API',
    },
  },

     security: {
     title: 'Security Testing',
     warning: 'Security Warning',
     riskAssessment: 'Risk Assessment',
     noRisks: 'No security risks detected',
     potentialRisks: 'Potential Risks',
     overview: 'Security Overview',
     scanning: 'Scanning...',
     scanComplete: 'Scan Complete',
         riskLevel: 'Risk Level',
    allLevels: 'All Levels',
    scanType: 'Scan Type',
    allTypes: 'All Types',
    totalIssues: 'Total Issues',
     criticalIssues: 'Critical Issues',
     highIssues: 'High Risk Issues',
     mediumIssues: 'Medium Risk Issues',
     lowIssues: 'Low Risk Issues',
     toolSecurity: 'Tool Security',
     promptSecurity: 'Prompt Security',
     resourceSecurity: 'Resource Security',
     resourceSecurityAnalysis: 'Resource Security Analysis',
     promptSecurityAnalysis: 'Prompt Security Analysis',
     startScan: 'Start Scan',
     stopScan: 'Stop Scan',
     scanSettings: 'Scan Settings',
     settings: 'Settings',
     
     selectLLM: 'Select LLM Model',
     selectLLMPlaceholder: 'Select LLM model for analysis',
     refreshLLMConfigs: 'Refresh Configuration List',
     autoGenerateTests: 'Auto Generate Test Cases',
  enableLLMAnalysis: 'Enable LLM Analysis',
     maxTestCases: 'Max Test Cases',
     timeout: 'Timeout (seconds)',
     vulnerabilities: 'Vulnerabilities',
     threats: 'Threats',
     risks: 'Risks',
     testResults: 'Test Results',
     llmAnalysis: 'LLM Analysis',
     recommendations: 'Security Recommendations',
    recommendation: 'Recommendation',
     securityReport: 'Security Report',
     exportReport: 'Export Report',
     reportGenerated: 'Report Generated',
     overallRisk: 'Overall Risk',
     noIssuesFound: 'No security issues found',
     scanInProgress: 'Scanning in progress, please wait...',
     scanFailed: 'Scan failed',
     noLLMConfigured: 'Please configure LLM model first',
     connectFirst: 'Please connect to MCP server first',
     scanCancelled: 'Scan cancelled',
     preparingScan: 'Preparing to start scan...',
     scanSettingsSaved: 'Settings saved successfully',
     reportExported: 'Report exported successfully',
     toolName: 'Tool Name',
     promptName: 'Prompt Name',
     resourceUri: 'Resource URI',
     vulnerabilityCount: 'Risk Count',
     testCaseCount: 'Test Cases',
     threatCount: 'Threats',
     riskCount: 'Risks',
     viewDetails: 'View Details',
     toolSecurityAnalysis: 'Tool Security Analysis',
     foundVulnerabilities: 'Found Risks',
     testCase: 'Test Case',
     totalTestCases: 'Total Test Cases',
     testFailed: 'Test Failed',
     passed: 'Passed',
     failed: 'Failed',
     passStatus: 'Pass Status',
     riskAssessmentTitle: 'Risk Assessment',
     llmAnalysisTitle: 'LLM Analysis',
     llmStaticAnalysis: 'LLM Static Analysis',
     comprehensiveRiskAnalysis: 'Comprehensive Risk Analysis',
     analysisSummary: 'Summary',
     detailedAnalysis: 'Detailed Analysis',
     specificDescription: 'Specific Description',
     potentialImpact: 'Potential Impact',
     mitigationSuggestion: 'Mitigation Suggestion',
     sideEffects: 'Side Effects',
     noData: 'No Data',
     issueDist: 'Issue Distribution',
     criticalRisk: 'Critical',
     highRisk: 'High Risk',
     mediumRisk: 'Medium Risk',
     lowRisk: 'Low Risk',
     riskLevels: {
       low: 'Low Risk',
       medium: 'Medium Risk',
       high: 'High Risk',
       critical: 'Critical Risk',
     },
     riskLevelTags: {
       low: 'Safe',
       medium: 'Medium Risk',
       high: 'High Risk',
       critical: 'Critical Risk',
     },
     // Access test result related translations
     testCaseNumber: 'Test Case #',
     resourceName: 'Resource Name',
     successStatus: 'Success Status',
     testURI: 'Test URI',
     returnResult: 'Return Result',
     testRiskLevel: 'Risk Level',
     testDescription: 'Description',
     testEvidence: 'Evidence',
     improvementMeasures: 'Improvement Measures',
     // Resource display related translations
     resourceDisplayName: 'Resource Name',
     staticResource: 'Static Resource',
     dynamicResource: 'Dynamic Resource',
     checkTypes: {
       tool: 'Tool Detection',
       prompt: 'Prompt Detection',
       resource: 'Resource Detection',
     },
     vulnerabilityTypes: {
       injection: 'Injection Attack',
       privilege: 'Privilege Escalation',
       leak: 'Information Leak',
       traversal: 'Path Traversal',
       manipulation: 'Malicious Manipulation',
       malicious: 'Malicious Code',
     },
     testCategory: 'Test Category',
     securityLevel: 'Security Level',
     description: 'Description',
     threatType: 'Threat Type',
     evidence: 'Evidence',
     // SecurityPanel additional texts
     logs: 'Logs',
     logCount: ' items',
     riskGuide: 'Risk Guide',
     exportLogs: 'Export Logs',
     clearLogs: 'Clear Logs',
     logsExported: 'Logs exported successfully',
     logsCleared: 'Logs cleared',
     riskAnalysisGuide: 'Security Risk Analysis Guide',
     // Detection history related
     history: {
       title: 'Detection History',
       noHistory: 'No detection history records',
       serverName: 'Server Name',
       scanType: 'Scan Type',
       overallRisk: 'Overall Risk',
       issueCount: 'Issue Count',
       status: 'Status',
       scanTime: 'Scan Time',
       actions: 'Actions',
       viewDetail: 'View Details',
       restoreRecord: 'Restore Record',
       deleteRecord: 'Delete Record',
       clearAll: 'Clear All',
       exportHistory: 'Export History',
       refreshHistory: 'Refresh History',
       confirmClear: 'Confirm Clear',
       confirmClearDesc: 'Are you sure you want to clear all security detection history records? This action cannot be undone.',
       confirmDelete: 'Confirm Delete',
       confirmDeleteDesc: 'Are you sure you want to delete this history record?',
       scanDetail: 'Scan Details',
       scanConfig: 'Scan Configuration',
       activeScan: 'Active Scan',
       passiveDetection: 'Passive Detection',
       completed: 'Completed',
       failed: 'Failed',
       cancelled: 'Cancelled',
       unknown: 'Unknown',
       duration: 'Duration',
       errorMessage: 'Error Message',
       detectionResults: 'Detection Results Statistics',
       toolDetection: 'Tool Detection',
       promptDetection: 'Prompt Detection',
       resourceDetection: 'Resource Detection',
       totalIssues: 'Total Issues',
       riskDistribution: 'Risk Distribution',
       criticalIssues: 'Critical Issues',
       highIssues: 'High Risk Issues',
       mediumIssues: 'Medium Risk Issues',
       lowIssues: 'Low Risk Issues',
       passiveResults: 'Passive Detection Results',
       potentialThreats: 'potential threats',
       loadHistoryFailed: 'Failed to load history records',
       deleteRecordFailed: 'Failed to delete history record',
       clearHistoryFailed: 'Failed to clear history records',
       restoreRecordSuccess: 'Detection record restored',
       exportHistoryFailed: 'Failed to export history records',
       saveHistorySuccess: 'Detection results saved to history',
       saveHistoryFailed: 'Failed to save detection history',
       noResultsToSave: 'No detection results to save',
       saveCombinedResultsSuccess: 'Saved {types} results to history',
       and: 'and',
       restoreActiveScanSuccess: 'Active scan results restored',
       restoreCombinedResultsSuccess: 'Combined detection results restored',
       onlySupportActiveOrCombined: 'Only supports restoring active scan or combined detection results',
       seconds: 's',
     },
     toolRisks: 'Potential security risks in tools:',
     promptRisks: 'Potential security risks in prompts:',
     resourceRisks: 'Potential security risks in resources:',
     injectionRisk: 'Injection Attack Risk',
     injectionDesc: 'Tools may accept unvalidated user input, leading to SQL injection, command injection, code injection and other attacks. Detection: Provide malicious input parameters and observe if the tool properly filters or rejects them.',
     privilegeRisk: 'Privilege Escalation Risk',
     privilegeDesc: 'Tools may bypass permission controls and perform operations beyond expectations. Detection: Try to access resources or functions requiring higher privileges.',
     infoLeakRisk: 'Information Disclosure Risk',
     infoLeakDesc: 'Tools may expose sensitive information in error messages or return results. Detection: Trigger error conditions and check if returned error messages contain sensitive data.',
     dosRisk: 'Denial of Service Risk',
     dosDesc: 'Tools may consume excessive system resources, causing service unavailability. Detection: Provide large amounts of data or complex parameters and observe resource usage.',
     promptInjectionRisk: 'Prompt Injection Attack',
     promptInjectionDesc: 'Malicious users may manipulate AI model behavior through crafted inputs, bypassing security restrictions or obtaining sensitive information. Detection: Inject instructions in prompt parameters and observe if AI follows the injected instructions.',
     maliciousGuidanceRisk: 'Malicious Guidance Risk',
     maliciousGuidanceDesc: 'Prompts may be designed to guide users to perform dangerous operations or leak sensitive information. Detection: Analyze prompt content for deceptive or guiding language.',
     contextPollutionRisk: 'Context Pollution',
     contextPollutionDesc: 'Prompts may contain misleading information that affects AI model judgment. Detection: Check if prompts contain false information or biased content.',
     privacyLeakRisk: 'Privacy Leak Risk',
     privacyLeakDesc: 'Prompts may induce AI models to leak sensitive information from training data. Detection: Try to obtain specific personal information or confidential data through prompts.',
     pathTraversalRisk: 'Path Traversal Attack',
     pathTraversalDesc: 'Maliciously crafted URIs may access sensitive files in the system. Detection: Try using path traversal characters like ../ to construct URIs and check if system files can be accessed.',
     accessControlBypassRisk: 'Access Control Bypass',
     accessControlBypassDesc: 'Resources may lack proper permission checks, allowing unauthorized access. Detection: Try to access resources that should be protected and check for permission verification.',
     sensitiveDataExposureRisk: 'Sensitive Data Exposure',
     sensitiveDataExposureDesc: 'Resource content may contain passwords, API keys and other sensitive information. Detection: Scan resource content for common sensitive information patterns.',
     contentInjectionRisk: 'Content Injection Risk',
     contentInjectionDesc: 'Resources may be maliciously modified to contain malicious content. Detection: Check the integrity and legitimacy of resource content.',
     securityTestResults: 'Security Test Results',
     testParameters: 'Test Parameters',
     executionResult: 'Execution Result',
     errorPrefix: 'Error: ',
     securityAssessment: 'Security Assessment',
     criticalIssuesDetail: 'Critical Security Issues',
     highRiskIssuesDetail: 'High Risk Issues',
     source: 'Source',
     sourceTypes: {
       tool: 'Tool',
       prompt: 'Prompt',
       resource: 'Resource',
     },
     riskType: 'Risk Type',
     suggestion: 'Recommendation',
     // SecurityLogViewer texts
     detectionLogs: 'Detection Logs',
     autoScroll: 'Auto Scroll',
     manualScroll: 'Manual',
     noLogsRecord: 'No log records',
     scanningInProgress: 'Scanning in progress...',
     detailsLabel: 'Details',
     closeModal: 'Close',
     phase: 'Phase',
     time: 'Time',
     duration: 'Duration',
     message: 'Message',
     metadata: 'Metadata',
     viewDetailInfo: 'View Details',
     detailData: 'Detailed Information',
     viewDetailData: 'View Detailed Data',
     phases: {
       init: 'Initialization',
       tool_analysis: 'Tool Analysis',
       prompt_analysis: 'Prompt Analysis',
       resource_analysis: 'Resource Analysis',
       test_generation: 'Test Generation',
       test_execution: 'Test Execution',
       evaluation: 'Result Evaluation',
       summary: 'Summary Report',
     },
     securityStatuses: {
       SAFE: 'Safe',
       WARNING: 'Warning',
       VULNERABLE: 'Risk',
       CRITICAL: 'Critical',
     },
     toolLabel: 'Tool',
     // Security engine log messages
     logMessages: {
       scanStarted: 'Security scan started',
       scanId: 'Scan ID',
   
       fetchingComponents: 'Fetching MCP components',
       fetchingFromServer: 'Fetching tools, prompts and resources from server...',
       componentsFetched: 'Components fetched successfully',
       toolsCount: ' tools',
       promptsCount: ' prompts',
       resourcesCount: ' resources',
       componentsComplete: 'MCP components fetching complete',
       toolAnalysisStart: 'Starting tool security analysis',
       analyzingTools: 'Preparing to analyze',
       toolsSecurityAnalysis: ' tools for security',
       analyzingTool: 'Analyzing tool',
       toolAnalysisComplete: 'Tool analysis complete',
       riskLevel: 'Risk level',
       toolAnalysisFailed: 'Tool analysis failed',
       checkingTool: 'Checking tool',
       failed: 'failed',
       unknownError: 'Unknown error',
       promptAnalysisStart: 'Starting prompt security analysis',
       analyzingPrompts: 'Preparing to analyze',
       promptsSecurityAnalysis: ' prompts for security',
       analyzingPrompt: 'Analyzing prompt',
       promptAnalysisComplete: 'Prompt analysis complete',
       promptAnalysisFailed: 'Prompt analysis failed',
       checkingPrompt: 'Checking prompt',
       resourceAnalysisStart: 'Starting resource security analysis',
       analyzingResources: 'Preparing to analyze',
       resourcesSecurityAnalysis: ' resources for security',
       analyzingResource: 'Analyzing resource',
       resourceAnalysisComplete: 'Resource analysis complete',
       resourceAnalysisFailed: 'Resource analysis failed',
       checkingResource: 'Checking resource',
       generatingReport: 'Generating security report',
       summarizingResults: 'Summarizing analysis results and generating comprehensive security report...',
       reportGenerated: 'Generating security report...',
       scanComplete: 'Security scan complete',
       overallRisk: 'Overall risk level',
       issuesFound: 'Issues found',
       count: '',
       llmStaticAnalysis: 'LLM static analysis',
       usingLLMForTool: 'Using LLM for tool',
       staticSecurityAnalysis: 'static security analysis',
       llmAnalysisComplete: 'LLM static analysis complete',
       staticAnalysisComplete: 'static analysis completed',
       toolAnalysisError: 'Tool analysis error',
       analysisError: 'Analyzing tool',
       whenError: 'error occurred',
       enhancedPromptAnalysis: 'Enhanced prompt analysis',
       usingLLMForPrompt: 'Using enhanced LLM to analyze prompt',
       promptSecurityRisk: 'security risks',
       promptSecurityComplete: 'Prompt security analysis complete',
       promptSecurityAnalysisComplete: 'enhanced security analysis completed',
       promptAnalysisError: 'Prompt analysis error',
       analysisPromptError: 'Analyzing prompt',
       enhancedResourceAnalysis: 'Enhanced resource analysis',
       usingLLMForResource: 'Using enhanced LLM to analyze resource',
       resourceSecurityRisk: 'security risks',
       resourceSecurityComplete: 'Resource security analysis complete',
       resourceSecurityAnalysisComplete: 'enhanced security analysis completed',
       resourceAnalysisError: 'Resource analysis error',
       analysisResourceError: 'Analyzing resource',
       generatingSmartTests: 'Generating smart test cases',
       forTool: 'for tool',
       generateTargetedTests: 'targeted security test cases',
       testGenerationComplete: 'Test case generation complete',
       generatedTests: 'Get',
       smartSecurityTests: 'smart security test cases',
       startExecutingTests: 'Starting test execution',
       executingTests: 'security test cases',
       executingTestCase: 'Executing test case',
       testType: 'Test type',
       purpose: 'Purpose',
       testExecutionSuccess: 'Test',
       executionSuccess: 'execution successful',
       parameters: 'Parameters',
       duration: 'Duration',
       testExecutionError: 'Test',
       executionError: 'execution error',
       error: 'Error',
       testGenerationFailed: 'Test generation failed',
       generateTestsFailed: 'Failed to generate test cases for tool',
       generateTestCase: 'generated',
       testCasesFailed: '',
       generatingPromptTests: 'Generating prompt test cases',
       forPrompt: 'for prompt',
       generateSecurityTests: 'security test cases',
       promptTestGenerationComplete: 'Prompt test case generation complete',
       generatedPromptTests: 'security test cases generated',
       executingPromptTests: 'Executing prompt security tests',
       executingPromptSecurityTests: 'prompt security tests',
       foundPromptSecurityRisk: 'Found prompt security risk',
       testFoundRisk: 'Test found security risk',
       promptTestFailed: 'Prompt test failed',
       promptTestExecutionFailed: 'Prompt test execution failed',
       promptTestGenerationFailed: 'Prompt test generation failed',
       generatePromptTestsFailed: 'Failed to generate test cases for prompt',
       executingResourceTests: 'Executing resource access tests',
       testingResourceAccess: 'Testing resource',
       basicAccessSecurity: 'basic access security',
       generatingResourceTests: 'Generating resource test cases',
       forResource: 'for resource',
       smartResourceTests: 'Starting smart resource tests',
       executingResourceSecurityTests: 'resource security tests',
       resourceTestFailed: 'Resource test failed',
       resourceTestExecutionFailed: 'Resource test execution failed',
       basicResourceTestComplete: 'Basic resource test complete',
       basicAccessTestPassed: 'basic access test passed',
       resourceAccessTestFailed: 'Resource access test failed',
       cannotAccessResource: 'Cannot access resource',
       testFoundSecurityIssue: 'Test',
       foundSecurityIssue: 'found security issue',
       issue: 'Issue',
       testPassedSecurityAssessment: 'Test',
       passedSecurityAssessment: 'passed security assessment',
       securityStatus: 'Security status',
       securityAssessmentFailed: 'Security assessment failed',
       assessmentFailed: 'Assessment failed',
       executingResourceTestCase: 'Executing resource test case',
       executingTest: 'Executing test',
       foundPathTraversalVuln: 'Found path traversal risk',
       resourceHasPathTraversalRisk: 'Resource has path traversal risk',
       securityTestPassed: 'Security test passed',
       securityTestPassed2: 'Security test passed',
       resourceTestCaseFailed: 'Resource test case execution failed',
       testCaseExecutionFailed: 'Test case execution failed',
       scanAlreadyInProgress: 'Security scan already in progress',
       initializingScan: 'Initializing security scan...',
       startingDetection: 'Starting detection of',
       tools: ' tools...',
       prompts: ' prompts...',
       resources: ' resources...',
       checkingTool2: 'Checking tool: ',
       checkingPrompt2: 'Checking prompt: ',
       checkingResource2: 'Checking resource: ',
     },
     
     // SecurityPanel additional translations
     activeScanResults: 'Active Scan Results',
     passiveDetectionResults: 'Passive Detection Results', 
     noDetectionResults: 'No Detection Results',
     saveDetectionResults: 'Save Detection Results',
     passiveDetectionStats: 'Passive Detection Statistics',
     totalDetectionCount: 'Total Detections',
     noRecommendations: 'No Recommendations',
     passiveDetectionThreats: 'Passive Detection Threat Details',
     realTimeUpdate: 'Real-time Update',
     // 使用 history.activeScan 和 history.passiveDetection
     combined: 'Combined',
     includeActiveAndPassive: 'Includes active scan and passive detection results',
     activeResultsOnly: 'Active scan results only', 
     passiveResultsOnly: 'Passive detection results only',
     stopped: 'Stopped',
     passiveResultsRealtime: 'Passive detection results are updated in real-time and displayed together with active scan results. Results will be cleared after disconnection.',
     saveResultsHint: 'Tip: You can click "Save Detection Results" to save current results to history, or click "Clear Results" to clear currently displayed results.',
     activeAndPassiveHint: 'Tip: Active scan and passive detection results will be displayed simultaneously. Results will be cleared after disconnection, please save important results in time.',
     onlyPassiveDetection: 'Passive Detection Only',
     onlyActiveScan: 'Active Scan Only',
     detectionResultsManagement: 'Detection Results Management',
     accessTestResults: 'Access Test Results',
     detectedThreatsCount: 'Detected Threats Count',
     totalTestsCount: 'Total Tests',
     mainRiskList: 'Main Risk List',
     totalRiskCount: 'Total Risk Count',
     detectionTime: 'Detection Time',
     riskEvidence: 'Risk Evidence',
     riskDescription: 'Risk Description',
     alertSource: 'Alert Source',
     llmIntelligentAnalysis: 'LLM Intelligent Analysis',
     // Passive detection translations
     passive: {
       title: 'Passive Security Monitoring',
       subtitle: 'Real-time monitoring of MCP calls, automatic security risk detection',
       description: 'After enabling passive detection, the system will automatically monitor your MCP operations and perform security analysis, including security detection for tool calls, resource access, and prompt processing.',
       monitoring: 'Monitoring',
       stopped: 'Stopped',
       enabled: 'Enabled',
       disabled: 'Disabled',
       realtimeNotification: 'Real-time Notification',
       disableRealtimeNotification: 'Disable Real-time Notification',
       enableRealtimeNotification: 'Enable Real-time Notification',
       exportResults: 'Export Results',
       clearRecords: 'Clear Records',
       realtimeMonitoring: 'Real-time Monitoring',
       detectionRules: 'Detection Rules',
       totalDetections: 'Total Detections',
       criticalRisks: 'Critical Risks',
       todayDetections: 'Today\'s Detections',
       currentHour: 'Current Hour',
       searchTargetName: 'Search target name or threat description...',
       searchTargetNamePlaceholder: 'Search target name or threat description...',
       riskLevelFilter: 'Risk Level:',
       callTypeFilter: 'Call Type:',
       allLevels: 'All',
       allTypes: 'All',
       toolCall: 'Tool',
       resourceAccess: 'Resource',
       promptProcessing: 'Prompt',
       showRecords: 'Showing {count} / {total} detection records',
       searchResults: ' (Search: "{search}")',
       refresh: 'Refresh',
       notEnabled: 'Passive Detection Not Enabled',
       notEnabledDesc: 'After enabling passive detection, the system will automatically monitor your MCP operations and perform security analysis, including security detection for tool calls, resource access, and prompt processing.',
       waitingResults: 'Waiting for Detection Results',
       waitingResultsDesc: 'Passive detection is enabled and monitoring your MCP operations...\nWhen you use tools, access resources, or process prompts, detection results will be displayed here.',
       detectionTime: 'Detection Time',
       callType: 'Call Type',
       targetName: 'Target Name',
       threatCount: 'Threat Count',
       sensitiveData: 'Sensitive Data',
       details: 'Details',
       threatDetails: 'Threat Details',
       evidence: 'Evidence:',
       threatLevel: 'Threat Level:',
       sensitiveDataLeaks: 'Sensitive Data Leaks',
       content: 'Content:',
       recommendations: 'Security Recommendations',
       callParameters: 'Call Parameters',
       callResult: 'Call Result',
       rulesManagement: {
         title: 'Rules Management',
         totalRules: 'Total Rules',
         enabledRules: 'Enabled Rules',
         builtinRules: 'Built-in Rules',
         customRules: 'Custom Rules',
         searchRules: 'Search rule name, description or tags...',
         searchRulesPlaceholder: 'Search rule name, description or tags...',
         allCategories: 'All Categories',
         security: 'Security',
         privacy: 'Privacy',
         compliance: 'Compliance',
         dataQuality: 'Data Quality',
         performance: 'Performance',
         custom: 'Custom',
         newRule: 'New Rule',
         exportRules: 'Export Rules',
         importRules: 'Import Rules',
         showRules: 'Showing {count} / {total} rules',
         ruleName: 'Rule Name',
         ruleDescription: 'Rule Description',
         category: 'Category',
         riskLevel: 'Risk Level',
         scope: 'Scope',
         status: 'Status',
         actions: 'Actions',
         edit: 'Edit',
         delete: 'Delete',
         builtin: 'Built-in',
         input: 'Input',
         output: 'Output',
         both: 'Both',
         regularExpression: 'Regular Expression',
         regularExpressionTooltip: 'Regular expression for matching threat patterns, supports JavaScript regex syntax',
         regularExpressionPlaceholder: 'Enter regex pattern, e.g.: (password|pwd)\\s*[:=]\\s*([^\\s]+)',
         threatType: 'Threat Type',
         threatTypePlaceholder: 'e.g.: Command Injection, XSS Attack, etc.',
         maxMatches: 'Max Matches',
         enableRule: 'Enable Rule',
         maskSensitiveData: 'Mask Sensitive Data',
         captureGroups: 'Capture Group Names',
         captureGroupsExtra: 'If the regex contains capture groups, separate group names with commas',
         captureGroupsPlaceholder: 'e.g.: password,username',
         tags: 'Tags',
         tagsExtra: 'Separate multiple tags with commas for rule categorization and search',
         tagsPlaceholder: 'e.g.: injection,sql,database',
         securityAdvice: 'Security Advice',
         securityAdvicePlaceholder: 'Security advice for users when threats are detected',
         remediationAdvice: 'Remediation Advice',
         remediationAdvicePlaceholder: 'Specific remediation measures and best practices',
         references: 'References',
         referencesExtra: 'One URL per line, providing relevant security knowledge and resource links',
         referencesPlaceholder: 'https://owasp.org/...',
         ruleTest: 'Rule Testing',
         testInput: 'Test Input',
         testInputExtra: 'Enter some text to test if your regex pattern matches correctly',
         testInputPlaceholder: 'Enter test content...',
         testRule: 'Test Rule',
         matched: 'Matched',
         notMatched: 'Not Matched',
         ruleSyntaxError: 'Rule Syntax Error',
         ruleValidationFailed: 'Rule Validation Failed',
         ruleValidationFailedDesc: 'Rule validation failed',
         notes: 'Notes',
         notesDesc: 'Notes',
         selectExportType: 'Select Export Type',
         exportTypeDesc: 'Please select the type of rules to export:',
         allRules: 'All Rules (including built-in rules)',
         customRulesOnly: 'Custom Rules Only',
         enabledRulesOnly: 'Enabled Rules Only',
         export: 'Export',
         cancel: 'Cancel',
         exportSuccess: 'Successfully exported {count} rules',
         noRulesToExport: 'No rules match the criteria for export',
         importRulesDesc: 'Import Detection Rules',
         importRulesFormat: 'Rule Format Description',
         importRulesExample: 'Please select a JSON file containing an array of rules. File format example:',
         requiredFields: 'Required fields: id, name, description, pattern, category, riskLevel, threatType',
         categories: 'Categories: security(security), privacy(privacy), compliance(compliance), data_quality(quality), performance(performance)',
         riskLevels: 'Risk levels: critical(severe), high(high), medium(medium), low(low)',
         detectionScopes: 'Detection scopes: parameters(input only), output(output only), both(all)',
         clickToSelectFile: 'Click OK to select the JSON file to import:',
         selectFile: 'Select File',
         importSuccess: 'Successfully imported {count} rules',
         importFailed: 'Import rules failed: {error}',
         jsonFormatError: 'JSON format error, please check file format',
         mustBeArray: 'File must contain an array of rules, please check file format',
         noRulesFound: 'No rules found in file',
         confirmDelete: 'Confirm Delete',
         confirmDeleteDesc: 'Are you sure you want to delete this rule? This action cannot be undone.',
         ruleUpdated: 'Rule updated successfully',
         ruleCreated: 'Rule created successfully',
         ruleDeleted: 'Rule deleted successfully',
         ruleEnabled: 'Rule enabled',
         ruleDisabled: 'Rule disabled',
         toggleRuleFailed: 'Toggle rule status failed: {error}',
         loadRulesFailed: 'Failed to load detection rules',
         saveRuleFailed: 'Failed to save rule: {error}',
         deleteRuleFailed: 'Failed to delete rule: {error}',
         cannotEditBuiltinRule: 'Built-in rules cannot be edited, only viewed and tested',
         view: 'View',
         testRuleWarning: 'Please enter test content',
         testSuccess: 'Test successful: Rule matched input content',
         testComplete: 'Test complete: Rule did not match input content',
         testFailed: 'Test failed',
         testRuleFailed: 'Test rule failed',
         regexExecutionFailed: 'Regular expression execution failed',
         ruleSyntaxErrorDesc: 'Rule syntax error, please check and try again',
         securityRecommendation: 'Security Recommendation:',
         remediationSuggestion: 'Remediation Suggestion:',
         updateTime: 'Update Time:',
         flags: 'Regex Flags',
         flagsPlaceholder: 'e.g.: gi (global, ignore case)',
         flagsHelp: 'Regular expression flags, such as g(global), i(ignore case), etc.',
         resetRules: 'Reset Rules',
         resetRulesDesc: 'Are you sure you want to reset all custom rules? This will delete all custom rules and keep only built-in rules. This action cannot be undone.',
         resetRulesSuccess: 'Rules reset successfully',
         resetRulesFailed: 'Failed to reset rules: {error}',
       },
     },
   },

  app: {
    title: 'MCP Security Inspector',
    description: 'Model Context Protocol Security Testing Tool',
    version: 'Version',
    language: 'Language',
    changeLanguage: 'Change Language',
  },
}; 